{"ast":null,"code":"var _jsxFileName = \"/Users/kevindiep/Desktop/homepage + about us/React/React/pet-491b/client/src/components/EmailVerify/index.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport success from \"../../images/success.png\";\nimport styles from \"./styles.module.css\";\nimport { Fragment } from \"react/cjs/react.production.min\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailVerify = () => {\n  _s();\n  //useState hook to manage the state of validUrl, which determines whether the email verification URL is valid or not.\n  const [validUrl, setValidUrl] = useState(true);\n  // useParams is used to get the parameters (id and token) from the URL.\n  const param = useParams();\n\n  //used to perform the verification when the component mounts\n  useEffect(() => {\n    // HTTP GET request to the email verification endpoint.\n    const verifyEmailUrl = async () => {\n      try {\n        const url = `http://localhost:8080/api/users/${param.id}/verify/${param.token}`;\n        const {\n          data\n        } = await axios.get(url);\n        console.log(data);\n        setValidUrl(true);\n      } catch (error) {\n        console.log(error);\n        setValidUrl(false);\n      }\n    };\n    verifyEmailUrl();\n  }, [param]);\n\n  // Render \n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: validUrl ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: success,\n        alt: \"success_img\",\n        className: styles.success_img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Email verified successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/login\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.green_btn,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"404 Not Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }, this);\n};\n_s(EmailVerify, \"qEbpmEcMgiSshNaf2eBhK9+G/6M=\", false, function () {\n  return [useParams];\n});\n_c = EmailVerify;\nexport default EmailVerify;\nvar _c;\n$RefreshReg$(_c, \"EmailVerify\");","map":{"version":3,"names":["useEffect","useState","useParams","Link","axios","success","styles","Fragment","jsxDEV","_jsxDEV","EmailVerify","_s","validUrl","setValidUrl","param","verifyEmailUrl","url","id","token","data","get","console","log","error","children","className","container","src","alt","success_img","fileName","_jsxFileName","lineNumber","columnNumber","to","green_btn","_c","$RefreshReg$"],"sources":["/Users/kevindiep/Desktop/homepage + about us/React/React/pet-491b/client/src/components/EmailVerify/index.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport success from \"../../images/success.png\";\nimport styles from \"./styles.module.css\";\nimport { Fragment } from \"react/cjs/react.production.min\";\n\n\nconst EmailVerify = () => {\n\t//useState hook to manage the state of validUrl, which determines whether the email verification URL is valid or not.\n\tconst [validUrl, setValidUrl] = useState(true);\n\t// useParams is used to get the parameters (id and token) from the URL.\n\tconst param = useParams();\n\n\t//used to perform the verification when the component mounts\n\tuseEffect(() => {\n\t\t// HTTP GET request to the email verification endpoint.\n\t\tconst verifyEmailUrl = async () => {\n\t\t\ttry {\n\t\t\t\tconst url = `http://localhost:8080/api/users/${param.id}/verify/${param.token}`;\n\t\t\t\tconst { data } = await axios.get(url);\n\t\t\t\tconsole.log(data);\n\t\t\t\tsetValidUrl(true);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t\tsetValidUrl(false);\n\t\t\t}\n\t\t};\n\t\tverifyEmailUrl();\n\t}, [param]);\n\n\t// Render \n\treturn (\n\t\t<Fragment>\n\t\t\t{validUrl ? (\n\t\t\t\t<div className={styles.container}>\n\t\t\t\t\t<img src={success} alt=\"success_img\" className={styles.success_img} />\n\t\t\t\t\t<h1>Email verified successfully</h1>\n\t\t\t\t\t<Link to=\"/login\">\n\t\t\t\t\t\t<button className={styles.green_btn}>Login</button>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<h1>404 Not Found</h1>\n\t\t\t)}\n\t\t</Fragment>\n\t);\n};\n\nexport default EmailVerify;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,QAAQ,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1D,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C;EACA,MAAMa,KAAK,GAAGZ,SAAS,CAAC,CAAC;;EAEzB;EACAF,SAAS,CAAC,MAAM;IACf;IACA,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACH,MAAMC,GAAG,GAAI,mCAAkCF,KAAK,CAACG,EAAG,WAAUH,KAAK,CAACI,KAAM,EAAC;QAC/E,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAACJ,GAAG,CAAC;QACrCK,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjBN,WAAW,CAAC,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOU,KAAK,EAAE;QACfF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;QAClBV,WAAW,CAAC,KAAK,CAAC;MACnB;IACD,CAAC;IACDE,cAAc,CAAC,CAAC;EACjB,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;;EAEX;EACA,oBACCL,OAAA,CAACF,QAAQ;IAAAiB,QAAA,EACPZ,QAAQ,gBACRH,OAAA;MAAKgB,SAAS,EAAEnB,MAAM,CAACoB,SAAU;MAAAF,QAAA,gBAChCf,OAAA;QAAKkB,GAAG,EAAEtB,OAAQ;QAACuB,GAAG,EAAC,aAAa;QAACH,SAAS,EAAEnB,MAAM,CAACuB;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACtExB,OAAA;QAAAe,QAAA,EAAI;MAA2B;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpCxB,OAAA,CAACN,IAAI;QAAC+B,EAAE,EAAC,QAAQ;QAAAV,QAAA,eAChBf,OAAA;UAAQgB,SAAS,EAAEnB,MAAM,CAAC6B,SAAU;UAAAX,QAAA,EAAC;QAAK;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAENxB,OAAA;MAAAe,QAAA,EAAI;IAAa;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EACrB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEb,CAAC;AAACtB,EAAA,CAvCID,WAAW;EAAA,QAIFR,SAAS;AAAA;AAAAkC,EAAA,GAJlB1B,WAAW;AAyCjB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}