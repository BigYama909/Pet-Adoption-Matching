{"ast":null,"code":"var _jsxFileName = \"/Users/kevindiep/Documents/GitHub/Pet-Adoption-Matching/pet-491b/client/src/components/Chat/Chat.jsx\",\n  _s = $RefreshSig$();\n// Importing necessary React features and styles\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./Chat.module.css\";\n// Importing icons for the chat interface from FontAwesome\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faComment, faMinus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n// Logo image for the chatbot\nimport logo from \"./Images/favicon_and_chatbot_logo.jpeg\";\n\n// Chatbot component definition\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatbotComponent() {\n  _s();\n  // State hooks for managing chatbot visibility, minimization, messages, and menu display\n  const [isVisible, setIsVisible] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showBackToMenuButton, setShowBackToMenuButton] = useState(false);\n  // useRef hook for managing automatic scrolling to the end of messages\n  const endOfMessagesRef = useRef(null);\n\n  // Effect hook for scrolling to the latest message\n  useEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages]);\n\n  // Effect hook to initialize chatbot messages upon first appearance\n  useEffect(() => {\n    if (isVisible && !isMinimized && messages.length === 0) {\n      // Set initial messages with a flag to show the logo only for the first set\n      setMessages([{\n        text: [\"Hi there ðŸ‘‹\", \"I'm Scout, the chatbot for Pet Adoption Match\", \"How can I help you?\"],\n        isUser: false,\n        initial: true\n      }]);\n      setShowMenu(true);\n    }\n  }, [isVisible, isMinimized]);\n\n  // Function to toggle chatbot visibility and minimization states\n  const toggleVisibility = () => {\n    if (isMinimized) {\n      // If the chatbot is minimized, unminimize it and make it visible\n      setIsMinimized(false);\n      setIsVisible(true);\n    } else {\n      // Toggle the visible state\n      setIsVisible(!isVisible);\n    }\n  };\n  // Function to minimize the chatbot window\n  const minimizeChatbot = () => {\n    setIsMinimized(!isMinimized);\n  };\n\n  // Function to close the chatbot window and reset states\n  const closeChatbot = () => {\n    setIsVisible(false);\n    setIsMinimized(false);\n    setMessages([]);\n    setShowMenu(false);\n  };\n\n  // Function to handle user choice and generate a chatbot response\n  const handleUserChoice = choiceText => {\n    setShowMenu(false);\n    // Immediately show the user's choice\n    setMessages(currentMessages => [...currentMessages, {\n      text: choiceText,\n      isUser: true\n    }]);\n    let chatbotResponse = \"\";\n    // Switch statement to generate responses based on user choice\n    switch (choiceText) {\n      // Cases for different user choices\n      // Add chatbot responses accordingly\n      case \"I have a pet that needs a new home.\":\n        chatbotResponse = \"We're here to help! Please provide us with more details about the pet in need so we can assist you better.\";\n        break;\n      case \"I want to adopt a pet.\":\n        chatbotResponse = \"We're so glad you chose us to help you find your new family member.\" + \"Please first sign up for an account or login to start the adoption process.\";\n      case \"I want to contact website owner.\":\n        chatbotResponse = \"Feel free to contact us using the provided contact information on our website. We're happy to assist you!\";\n        break;\n      case \"I am a shelter or rescue employee.\":\n        chatbotResponse = \"Thank you for the important work you do! Please let us know how we can support your efforts.\";\n        break;\n    }\n\n    // Add the chatbot's response after a delay\n    setTimeout(() => {\n      setMessages(currentMessages => [...currentMessages, {\n        text: chatbotResponse,\n        isUser: false\n      }]);\n    }, 500);\n    setShowBackToMenuButton(true);\n  };\n  // Function to show the main menu and hide the back button\n  const showMainMenu = () => {\n    setShowMenu(true);\n    setShowBackToMenuButton(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [(!isVisible || isMinimized) && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.chatbot_toggler,\n      onClick: toggleVisibility,\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), isVisible && !isMinimized && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatbot,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.top_buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: styles.minimize_btn,\n            onClick: minimizeChatbot,\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faMinus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: styles.close_btn,\n            onClick: closeChatbot,\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faTimes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.chatbox,\n        children: [messages.map((msg, index) => msg.initial ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.chatbotMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            alt: \"Chatbot Logo\",\n            className: styles.chatbot_logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 19\n          }, this), msg.text.map((line, lineIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: line\n          }, lineIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 21\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.isUser ? styles.userMessage : styles.chatbotMessage,\n          children: [!msg.isUser && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            alt: \"Chatbot Logo\",\n            className: styles.chatbot_logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: endOfMessagesRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.menu} ${styles.menuSlideUp}`,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: styles.user_choices,\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleUserChoice(\"I have a pet that needs a new home.\"),\n              children: \"I have a pet that needs a new home.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleUserChoice(\"I want to adopt a pet.\"),\n              children: \"I want to adopt a pet.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleUserChoice(\"I want to contact website owner.\"),\n              children: \"I want to contact website owner.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleUserChoice(\"I am a shelter or rescue employee.\"),\n              children: \"I am a shelter or rescue employee.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this), showBackToMenuButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.backToMenuButton,\n        onClick: showMainMenu,\n        children: \"Back to Main Menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n// Exporting the ChatbotComponent for use in other parts of the application\n_s(ChatbotComponent, \"V8R5S4lQMlR9Ls+p8PJ8Y7b8imw=\");\n_c = ChatbotComponent;\nexport default ChatbotComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatbotComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styles","FontAwesomeIcon","faComment","faMinus","faTimes","logo","jsxDEV","_jsxDEV","ChatbotComponent","_s","isVisible","setIsVisible","isMinimized","setIsMinimized","messages","setMessages","showMenu","setShowMenu","showBackToMenuButton","setShowBackToMenuButton","endOfMessagesRef","current","scrollIntoView","behavior","length","text","isUser","initial","toggleVisibility","minimizeChatbot","closeChatbot","handleUserChoice","choiceText","currentMessages","chatbotResponse","setTimeout","showMainMenu","children","className","chatbot_toggler","onClick","icon","fileName","_jsxFileName","lineNumber","columnNumber","chatbot","top_buttons","minimize_btn","close_btn","chatbox","map","msg","index","chatbotMessage","src","alt","chatbot_logo","line","lineIndex","userMessage","ref","menu","menuSlideUp","user_choices","backToMenuButton","_c","$RefreshReg$"],"sources":["/Users/kevindiep/Documents/GitHub/Pet-Adoption-Matching/pet-491b/client/src/components/Chat/Chat.jsx"],"sourcesContent":["// Importing necessary React features and styles\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./Chat.module.css\";\n// Importing icons for the chat interface from FontAwesome\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faComment, faMinus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n// Logo image for the chatbot\nimport logo from \"./Images/favicon_and_chatbot_logo.jpeg\";\n\n// Chatbot component definition\nfunction ChatbotComponent() {\n  // State hooks for managing chatbot visibility, minimization, messages, and menu display\n  const [isVisible, setIsVisible] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showBackToMenuButton, setShowBackToMenuButton] = useState(false);\n  // useRef hook for managing automatic scrolling to the end of messages\n  const endOfMessagesRef = useRef(null);\n\n  // Effect hook for scrolling to the latest message\n  useEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]);\n\n  // Effect hook to initialize chatbot messages upon first appearance\n  useEffect(() => {\n    if (isVisible && !isMinimized && messages.length === 0) {\n      // Set initial messages with a flag to show the logo only for the first set\n      setMessages([\n        {\n          text: [\n            \"Hi there ðŸ‘‹\",\n            \"I'm Scout, the chatbot for Pet Adoption Match\",\n            \"How can I help you?\",\n          ],\n          isUser: false,\n          initial: true,\n        },\n      ]);\n      setShowMenu(true);\n    }\n  }, [isVisible, isMinimized]);\n\n  // Function to toggle chatbot visibility and minimization states\n  const toggleVisibility = () => {\n    if (isMinimized) {\n      // If the chatbot is minimized, unminimize it and make it visible\n      setIsMinimized(false);\n      setIsVisible(true);\n    } else {\n      // Toggle the visible state\n      setIsVisible(!isVisible);\n    }\n  };\n  // Function to minimize the chatbot window\n  const minimizeChatbot = () => {\n    setIsMinimized(!isMinimized);\n  };\n\n  // Function to close the chatbot window and reset states\n  const closeChatbot = () => {\n    setIsVisible(false);\n    setIsMinimized(false);\n    setMessages([]);\n    setShowMenu(false);\n  };\n\n  // Function to handle user choice and generate a chatbot response\n  const handleUserChoice = (choiceText) => {\n    setShowMenu(false);\n    // Immediately show the user's choice\n    setMessages((currentMessages) => [\n      ...currentMessages,\n      { text: choiceText, isUser: true },\n    ]);\n\n    let chatbotResponse = \"\";\n    // Switch statement to generate responses based on user choice\n    switch (choiceText) {\n      // Cases for different user choices\n      // Add chatbot responses accordingly\n      case \"I have a pet that needs a new home.\":\n        chatbotResponse =\n          \"We're here to help! Please provide us with more details about the pet in need so we can assist you better.\";\n        break;\n      case \"I want to adopt a pet.\":\n        chatbotResponse =\n          \"We're so glad you chose us to help you find your new family member.\" +\n          \"Please first sign up for an account or login to start the adoption process.\";\n      case \"I want to contact website owner.\":\n        chatbotResponse =\n          \"Feel free to contact us using the provided contact information on our website. We're happy to assist you!\";\n        break;\n      case \"I am a shelter or rescue employee.\":\n        chatbotResponse =\n          \"Thank you for the important work you do! Please let us know how we can support your efforts.\";\n        break;\n    }\n\n    // Add the chatbot's response after a delay\n    setTimeout(() => {\n      setMessages((currentMessages) => [\n        ...currentMessages,\n        { text: chatbotResponse, isUser: false },\n      ]);\n    }, 500);\n    setShowBackToMenuButton(true);\n  };\n  // Function to show the main menu and hide the back button\n  const showMainMenu = () => {\n    setShowMenu(true);\n    setShowBackToMenuButton(false);\n  };\n\n  return (\n    <div>\n      {/* Button to toggle chat visibility/minimization */}\n      {(!isVisible || isMinimized) && (\n        <button className={styles.chatbot_toggler} onClick={toggleVisibility}>\n          <FontAwesomeIcon icon={faComment} />\n          <span> Chat</span>\n        </button>\n      )}\n      {/* Chatbot UI when visible and not minimized */}\n      {isVisible && !isMinimized && (\n        <div className={styles.chatbot}>\n          <header>\n            <h2>Chatbot</h2>\n            <div className={styles.top_buttons}>\n              <button className={styles.minimize_btn} onClick={minimizeChatbot}>\n                <FontAwesomeIcon icon={faMinus} />\n              </button>\n              <button className={styles.close_btn} onClick={closeChatbot}>\n                <FontAwesomeIcon icon={faTimes} />\n              </button>\n            </div>\n          </header>\n          {/* Main chat area where messages are displayed */}\n          <div className={styles.chatbox}>\n            {messages.map((msg, index) =>\n              msg.initial ? (\n                <div key={index} className={styles.chatbotMessage}>\n                  <img\n                    src={logo}\n                    alt=\"Chatbot Logo\"\n                    className={styles.chatbot_logo}\n                  />\n                  {msg.text.map((line, lineIndex) => (\n                    <p key={lineIndex}>{line}</p>\n                  ))}\n                </div>\n              ) : (\n                <div\n                  key={index}\n                  className={\n                    msg.isUser ? styles.userMessage : styles.chatbotMessage\n                  }\n                >\n                  {!msg.isUser && (\n                    <img\n                      src={logo}\n                      alt=\"Chatbot Logo\"\n                      className={styles.chatbot_logo}\n                    />\n                  )}\n                  <p>{msg.text}</p>\n                </div>\n              )\n            )}\n            {/* Scroll anchor for automatic scrolling to the latest message */}\n            <div ref={endOfMessagesRef} />\n          </div>\n          {/* Conditional rendering of the menu for user choices */}      \n          {showMenu && (\n            <div className={`${styles.menu} ${styles.menuSlideUp}`}>\n              <ul className={styles.user_choices}>\n                <li>\n                  <button\n                    onClick={() =>\n                      handleUserChoice(\"I have a pet that needs a new home.\")\n                    }\n                  >\n                    I have a pet that needs a new home.\n                  </button>\n                </li>\n                <li>\n                  <button\n                    onClick={() => handleUserChoice(\"I want to adopt a pet.\")}\n                  >\n                    I want to adopt a pet.\n                  </button>\n                </li>\n                <li>\n                  <button\n                    onClick={() =>\n                      handleUserChoice(\"I want to contact website owner.\")\n                    }\n                  >\n                    I want to contact website owner.\n                  </button>\n                </li>\n                <li>\n                  <button\n                    onClick={() =>\n                      handleUserChoice(\"I am a shelter or rescue employee.\")\n                    }\n                  >\n                    I am a shelter or rescue employee.\n                  </button>\n                </li>\n              </ul>\n            </div>\n          )}\n          {/* Button to return to the main menu, displayed based on state */}\n          {showBackToMenuButton && (\n            <button className={styles.backToMenuButton} onClick={showMainMenu}>\n              Back to Main Menu\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n// Exporting the ChatbotComponent for use in other parts of the application\nexport default ChatbotComponent;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;AACtC;AACA,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,SAAS,EAAEC,OAAO,EAAEC,OAAO,QAAQ,mCAAmC;AAC/E;AACA,OAAOC,IAAI,MAAM,wCAAwC;;AAEzD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACqB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACvE;EACA,MAAMuB,gBAAgB,GAAGrB,MAAM,CAAC,IAAI,CAAC;;EAErC;EACAD,SAAS,CAAC,MAAM;IACd,IAAIsB,gBAAgB,CAACC,OAAO,EAAE;MAC5BD,gBAAgB,CAACC,OAAO,CAACC,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACjE;EACF,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;;EAEd;EACAhB,SAAS,CAAC,MAAM;IACd,IAAIY,SAAS,IAAI,CAACE,WAAW,IAAIE,QAAQ,CAACU,MAAM,KAAK,CAAC,EAAE;MACtD;MACAT,WAAW,CAAC,CACV;QACEU,IAAI,EAAE,CACJ,aAAa,EACb,+CAA+C,EAC/C,qBAAqB,CACtB;QACDC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MACX,CAAC,CACF,CAAC;MACFV,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,CAACP,SAAS,EAAEE,WAAW,CAAC,CAAC;;EAE5B;EACA,MAAMgB,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIhB,WAAW,EAAE;MACf;MACAC,cAAc,CAAC,KAAK,CAAC;MACrBF,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,MAAM;MACL;MACAA,YAAY,CAAC,CAACD,SAAS,CAAC;IAC1B;EACF,CAAC;EACD;EACA,MAAMmB,eAAe,GAAGA,CAAA,KAAM;IAC5BhB,cAAc,CAAC,CAACD,WAAW,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMkB,YAAY,GAAGA,CAAA,KAAM;IACzBnB,YAAY,CAAC,KAAK,CAAC;IACnBE,cAAc,CAAC,KAAK,CAAC;IACrBE,WAAW,CAAC,EAAE,CAAC;IACfE,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;;EAED;EACA,MAAMc,gBAAgB,GAAIC,UAAU,IAAK;IACvCf,WAAW,CAAC,KAAK,CAAC;IAClB;IACAF,WAAW,CAAEkB,eAAe,IAAK,CAC/B,GAAGA,eAAe,EAClB;MAAER,IAAI,EAAEO,UAAU;MAAEN,MAAM,EAAE;IAAK,CAAC,CACnC,CAAC;IAEF,IAAIQ,eAAe,GAAG,EAAE;IACxB;IACA,QAAQF,UAAU;MAChB;MACA;MACA,KAAK,qCAAqC;QACxCE,eAAe,GACb,4GAA4G;QAC9G;MACF,KAAK,wBAAwB;QAC3BA,eAAe,GACb,qEAAqE,GACrE,6EAA6E;MACjF,KAAK,kCAAkC;QACrCA,eAAe,GACb,2GAA2G;QAC7G;MACF,KAAK,oCAAoC;QACvCA,eAAe,GACb,8FAA8F;QAChG;IACJ;;IAEA;IACAC,UAAU,CAAC,MAAM;MACfpB,WAAW,CAAEkB,eAAe,IAAK,CAC/B,GAAGA,eAAe,EAClB;QAAER,IAAI,EAAES,eAAe;QAAER,MAAM,EAAE;MAAM,CAAC,CACzC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;IACPP,uBAAuB,CAAC,IAAI,CAAC;EAC/B,CAAC;EACD;EACA,MAAMiB,YAAY,GAAGA,CAAA,KAAM;IACzBnB,WAAW,CAAC,IAAI,CAAC;IACjBE,uBAAuB,CAAC,KAAK,CAAC;EAChC,CAAC;EAED,oBACEZ,OAAA;IAAA8B,QAAA,GAEG,CAAC,CAAC3B,SAAS,IAAIE,WAAW,kBACzBL,OAAA;MAAQ+B,SAAS,EAAEtC,MAAM,CAACuC,eAAgB;MAACC,OAAO,EAAEZ,gBAAiB;MAAAS,QAAA,gBACnE9B,OAAA,CAACN,eAAe;QAACwC,IAAI,EAAEvC;MAAU;QAAAwC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACpCtC,OAAA;QAAA8B,QAAA,EAAM;MAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CACT,EAEAnC,SAAS,IAAI,CAACE,WAAW,iBACxBL,OAAA;MAAK+B,SAAS,EAAEtC,MAAM,CAAC8C,OAAQ;MAAAT,QAAA,gBAC7B9B,OAAA;QAAA8B,QAAA,gBACE9B,OAAA;UAAA8B,QAAA,EAAI;QAAO;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChBtC,OAAA;UAAK+B,SAAS,EAAEtC,MAAM,CAAC+C,WAAY;UAAAV,QAAA,gBACjC9B,OAAA;YAAQ+B,SAAS,EAAEtC,MAAM,CAACgD,YAAa;YAACR,OAAO,EAAEX,eAAgB;YAAAQ,QAAA,eAC/D9B,OAAA,CAACN,eAAe;cAACwC,IAAI,EAAEtC;YAAQ;cAAAuC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC,eACTtC,OAAA;YAAQ+B,SAAS,EAAEtC,MAAM,CAACiD,SAAU;YAACT,OAAO,EAAEV,YAAa;YAAAO,QAAA,eACzD9B,OAAA,CAACN,eAAe;cAACwC,IAAI,EAAErC;YAAQ;cAAAsC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAETtC,OAAA;QAAK+B,SAAS,EAAEtC,MAAM,CAACkD,OAAQ;QAAAb,QAAA,GAC5BvB,QAAQ,CAACqC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KACvBD,GAAG,CAACzB,OAAO,gBACTpB,OAAA;UAAiB+B,SAAS,EAAEtC,MAAM,CAACsD,cAAe;UAAAjB,QAAA,gBAChD9B,OAAA;YACEgD,GAAG,EAAElD,IAAK;YACVmD,GAAG,EAAC,cAAc;YAClBlB,SAAS,EAAEtC,MAAM,CAACyD;UAAa;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC,CAAC,EACDO,GAAG,CAAC3B,IAAI,CAAC0B,GAAG,CAAC,CAACO,IAAI,EAAEC,SAAS,kBAC5BpD,OAAA;YAAA8B,QAAA,EAAoBqB;UAAI,GAAhBC,SAAS;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAC7B,CAAC;QAAA,GARMQ,KAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASV,CAAC,gBAENtC,OAAA;UAEE+B,SAAS,EACPc,GAAG,CAAC1B,MAAM,GAAG1B,MAAM,CAAC4D,WAAW,GAAG5D,MAAM,CAACsD,cAC1C;UAAAjB,QAAA,GAEA,CAACe,GAAG,CAAC1B,MAAM,iBACVnB,OAAA;YACEgD,GAAG,EAAElD,IAAK;YACVmD,GAAG,EAAC,cAAc;YAClBlB,SAAS,EAAEtC,MAAM,CAACyD;UAAa;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC,CACF,eACDtC,OAAA;YAAA8B,QAAA,EAAIe,GAAG,CAAC3B;UAAI;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GAZZQ,KAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAaP,CAET,CAAC,eAEDtC,OAAA;UAAKsD,GAAG,EAAEzC;QAAiB;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B,CAAC,EAEL7B,QAAQ,iBACPT,OAAA;QAAK+B,SAAS,EAAG,GAAEtC,MAAM,CAAC8D,IAAK,IAAG9D,MAAM,CAAC+D,WAAY,EAAE;QAAA1B,QAAA,eACrD9B,OAAA;UAAI+B,SAAS,EAAEtC,MAAM,CAACgE,YAAa;UAAA3B,QAAA,gBACjC9B,OAAA;YAAA8B,QAAA,eACE9B,OAAA;cACEiC,OAAO,EAAEA,CAAA,KACPT,gBAAgB,CAAC,qCAAqC,CACvD;cAAAM,QAAA,EACF;YAED;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC,eACLtC,OAAA;YAAA8B,QAAA,eACE9B,OAAA;cACEiC,OAAO,EAAEA,CAAA,KAAMT,gBAAgB,CAAC,wBAAwB,CAAE;cAAAM,QAAA,EAC3D;YAED;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC,eACLtC,OAAA;YAAA8B,QAAA,eACE9B,OAAA;cACEiC,OAAO,EAAEA,CAAA,KACPT,gBAAgB,CAAC,kCAAkC,CACpD;cAAAM,QAAA,EACF;YAED;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC,eACLtC,OAAA;YAAA8B,QAAA,eACE9B,OAAA;cACEiC,OAAO,EAAEA,CAAA,KACPT,gBAAgB,CAAC,oCAAoC,CACtD;cAAAM,QAAA,EACF;YAED;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CACN,EAEA3B,oBAAoB,iBACnBX,OAAA;QAAQ+B,SAAS,EAAEtC,MAAM,CAACiE,gBAAiB;QAACzB,OAAO,EAAEJ,YAAa;QAAAC,QAAA,EAAC;MAEnE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AACA;AAAApC,EAAA,CAzNSD,gBAAgB;AAAA0D,EAAA,GAAhB1D,gBAAgB;AA0NzB,eAAeA,gBAAgB;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}