{"ast":null,"code":"var _jsxFileName = \"/Users/kevindiep/Documents/GitHub/Pet-Adoption-Matching/pet-491b/client/src/components/Cost_Calculator/Calculator.jsx\",\n  _s = $RefreshSig$();\n// Import necessary React hooks and styles\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./Calculator.module.css\";\nimport { Doughnut } from \"react-chartjs-2\"; // Import Doughnut chart component\nimport \"chart.js/auto\"; // This import is necessary for Chart.js 3.x and later\n\n// Define the Calculator component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calculator() {\n  _s();\n  // Ref to access the chart DOM element\n  const chartRef = useRef(null);\n  // State for selecting pet type\n  const [petType, setPetType] = useState(\"\");\n  // State for storing details about the pet\n  const [petDetails, setPetDetails] = useState({\n    breed: \"\",\n    size: \"\",\n    foodCost: 0,\n    groomingCost: 0,\n    vetCost: 0,\n    additionalCosts: 0\n  });\n  // State for the list of breeds based on selected pet type\n  const [breeds, setBreeds] = useState([]);\n  // State for storing the calculation results\n  const [result, setResult] = useState(null);\n  // State for any error messages\n  const [error, setError] = useState(\"\");\n\n  // Predefined breed options with additional costs\n  const breedOptions = {\n    Dog: [{\n      name: \"Golden Retriever\",\n      additionalCost: 200\n    }, {\n      name: \"Labrador Retriever\",\n      additionalCost: 180\n    }, {\n      name: \"French Bulldog\",\n      additionalCost: 220\n    }],\n    Cat: [{\n      name: \"Siamese\",\n      additionalCost: 150\n    }, {\n      name: \"Persian\",\n      additionalCost: 170\n    }, {\n      name: \"Maine Coon\",\n      additionalCost: 190\n    }]\n  };\n\n  // Effect hook to update breeds list and reset breed in petDetails when petType changes\n  useEffect(() => {\n    if (petType && breedOptions[petType]) {\n      setBreeds(breedOptions[petType]);\n      setPetDetails(prevDetails => ({\n        ...prevDetails,\n        breed: \"\"\n      }));\n    } else {\n      setBreeds([]);\n      setPetDetails(prevDetails => ({\n        ...prevDetails,\n        breed: \"\"\n      }));\n    }\n  }, [petType]);\n\n  // Function to calculate total and monthly costs, and lifetime cost of pet ownership\n  const calculateCosts = () => {\n    var _breeds$find;\n    if (!petType || !petDetails.breed || !petDetails.size) {\n      setError(\"Please provide all required details.\");\n      return;\n    }\n    setError(\"\");\n    // Base annual cost for any pet\n    let baseAnnualCost = 1000;\n    // Additional cost based on breed\n    const breedCost = ((_breeds$find = breeds.find(b => b.name === petDetails.breed)) === null || _breeds$find === void 0 ? void 0 : _breeds$find.additionalCost) || 0;\n    // Total annual cost calculation\n    const totalAnnualCost = baseAnnualCost + breedCost + parseFloat(petDetails.foodCost) + parseFloat(petDetails.groomingCost) + parseFloat(petDetails.vetCost) + parseFloat(petDetails.additionalCosts);\n\n    // Monthly cost calculation\n    const monthlyCost = totalAnnualCost / 12;\n    // Calculate expected life span based on pet type and size\n    const expectedLifeSpan = calculateLifeExpectancy(petType, petDetails.size);\n    // Calculate lifetime cost\n    const lifetimeCost = totalAnnualCost * expectedLifeSpan;\n\n    // Generate chart data for pie chart visualizaiton\n    const chartData = {\n      labels: [\"Food\", \"Grooming\", \"Vet\", \"Additional Costs\", \"Base Cost\"],\n      datasets: [{\n        label: \"Cost Breakdown\",\n        data: [petDetails.foodCost, petDetails.groomingCost, petDetails.vetCost, petDetails.additionalCosts, baseAnnualCost],\n        backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\"],\n        borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\"],\n        borderWidth: 1\n      }]\n    };\n    // Set the result state with calcualted costs and chart data for rendering\n    setResult({\n      annualCost: totalAnnualCost,\n      monthlyCost,\n      lifetimeCost,\n      chartData\n    });\n  };\n\n  // Options for customizing the appearance and functionality of the chart\n  const chartOptions = {\n    plugins: {\n      title: {\n        display: true,\n        text: \"Cost Breakdown in Pie Chart\",\n        // Chart title\n        font: {\n          size: 40,\n          family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n          weight: \"bold\"\n        },\n        color: \"#333\",\n        padding: {\n          top: 20,\n          bottom: 30\n        }\n      },\n      legend: {\n        display: true,\n        // Show legend\n        position: \"top\",\n        // Legend position\n        labels: {\n          font: {\n            size: 13,\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\"\n          },\n          color: \"#444\"\n        }\n      },\n      tooltip: {\n        enabled: true,\n        // Enable tooltips\n        mode: \"index\",\n        intersect: false,\n        bodyFont: {\n          size: 16\n        },\n        backgroundColor: \"rgba(0,0,0,0.8)\",\n        titleFont: {\n          size: 16,\n          weight: \"bold\"\n        },\n        // Custom tooltip format to show currency values\n        callbacks: {\n          label: function (context) {\n            let label = context.label;\n            let value = context.parsed;\n            return `${label}: $${value.toFixed(2)}`;\n          }\n        }\n      }\n    },\n    animation: {\n      animateRotate: true,\n      animateScale: true,\n      duration: 1000 // Animation duration\n    },\n    responsive: true,\n    // Ensure chart is responsive\n    maintainAspectRatio: false,\n    // Allow aspect ratio to change\n    layout: {\n      padding: {\n        left: 10,\n        right: 10,\n        top: 0,\n        bottom: 0\n      }\n    }\n  };\n\n  // Function to calculate expected life span of the pet based on its type and size\n  const calculateLifeExpectancy = (petType, size) => {\n    if (petType === \"Dog\") {\n      return size === \"Large\" ? 10 : 15;\n    } else if (petType === \"Cat\") {\n      return 18;\n    } else {\n      return 5; // Default for 'Other'\n    }\n  };\n\n  // Function to download the results as a text file and the chart image\n  const downloadResults = () => {\n    if (!result) return; // Ensure there are results to download\n    const filename = \"pet_ownership_cost_estimate.txt\";\n    // Format content for the text file\n    const content = `Pet Ownership Cost Estimate:\nPet Type: ${petType}\nBreed: ${petDetails.breed}\nSize: ${petDetails.size}\nAnnual Cost: $${result.annualCost.toFixed(2)}\nMonthly Cost: $${result.monthlyCost.toFixed(2)}\nLifetime Cost: $${result.lifetimeCost.toFixed(2)}\n`;\n    // Create and trigger a download link for the text file\n    const element = document.createElement(\"a\");\n    const file = new Blob([content], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for Firefox\n    element.click();\n    // Check if the chart reference exists and the current instance is available\n    if (chartRef.current) {\n      const chartInstance = chartRef.current.chartInstance;\n      const url = chartInstance.toBase64Image(); // Get the chart image as a base64-encoded string\n\n      // Create a link and trigger the download\n      const imageLink = document.createElement(\"a\");\n      imageLink.href = url;\n      imageLink.download = \"chart.png\";\n      document.body.appendChild(imageLink); // Required for Firefox\n      imageLink.click();\n      document.body.removeChild(imageLink); // Clean up\n    }\n  };\n\n  // Render the calculator UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.calculator,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.h1,\n      children: \"Pet Ownership Cost Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: \"Pet Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: petType,\n        onChange: e => setPetType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Pet Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Dog\",\n          children: \"Dog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Cat\",\n          children: \"Cat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Other\",\n          children: \"Other\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: \"Breed:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: petDetails.breed,\n        onChange: e => setPetDetails({\n          ...petDetails,\n          breed: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Breed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), breeds.map(breed => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: breed.name,\n          children: breed.name\n        }, breed.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: \"Size:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: petDetails.size,\n        onChange: e => setPetDetails({\n          ...petDetails,\n          size: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Small\",\n          children: \"Small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Large\",\n          children: \"Large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: \"Monthly Food Cost ($):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: petDetails.foodCost,\n        onChange: e => setPetDetails({\n          ...petDetails,\n          foodCost: e.target.value\n        }),\n        placeholder: \"Food Cost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: \"Annual Grooming Cost ($):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: petDetails.groomingCost,\n        onChange: e => setPetDetails({\n          ...petDetails,\n          groomingCost: e.target.value\n        }),\n        placeholder: \"Grooming Cost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: \"Annual Vet Cost ($):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: petDetails.vetCost,\n        onChange: e => setPetDetails({\n          ...petDetails,\n          vetCost: e.target.value\n        }),\n        placeholder: \"Vet Cost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: \"Annual Additional Costs ($):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: petDetails.additionalCosts,\n        onChange: e => setPetDetails({\n          ...petDetails,\n          additionalCosts: e.target.value\n        }),\n        placeholder: \"Additional Costs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: calculateCosts,\n      className: styles.calculateButton,\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.results,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Annual Cost: $\", result.annualCost.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Monthly Cost: $\", result.monthlyCost.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Lifetime Cost: $\", result.lifetimeCost.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadResults,\n        className: styles.downloadButton,\n        children: \"Download Estimate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this), result && result.chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.chartContainer,\n        children: /*#__PURE__*/_jsxDEV(Doughnut, {\n          data: result.chartData,\n          options: chartOptions,\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n}\n_s(Calculator, \"uceuGjj/r/fDm/Di5jWoYs4msys=\");\n_c = Calculator;\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styles","Doughnut","jsxDEV","_jsxDEV","Calculator","_s","chartRef","petType","setPetType","petDetails","setPetDetails","breed","size","foodCost","groomingCost","vetCost","additionalCosts","breeds","setBreeds","result","setResult","error","setError","breedOptions","Dog","name","additionalCost","Cat","prevDetails","calculateCosts","_breeds$find","baseAnnualCost","breedCost","find","b","totalAnnualCost","parseFloat","monthlyCost","expectedLifeSpan","calculateLifeExpectancy","lifetimeCost","chartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","annualCost","chartOptions","plugins","title","display","text","font","family","weight","color","padding","top","bottom","legend","position","tooltip","enabled","mode","intersect","bodyFont","titleFont","callbacks","context","value","parsed","toFixed","animation","animateRotate","animateScale","duration","responsive","maintainAspectRatio","layout","left","right","downloadResults","filename","content","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","current","chartInstance","url","toBase64Image","imageLink","removeChild","className","calculator","children","h1","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","map","placeholder","onClick","calculateButton","results","downloadButton","chartContainer","options","ref","_c","$RefreshReg$"],"sources":["/Users/kevindiep/Documents/GitHub/Pet-Adoption-Matching/pet-491b/client/src/components/Cost_Calculator/Calculator.jsx"],"sourcesContent":["// Import necessary React hooks and styles\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./Calculator.module.css\";\nimport { Doughnut } from \"react-chartjs-2\"; // Import Doughnut chart component\nimport \"chart.js/auto\"; // This import is necessary for Chart.js 3.x and later\n\n// Define the Calculator component\nfunction Calculator() {\n  // Ref to access the chart DOM element\n  const chartRef = useRef(null);\n  // State for selecting pet type\n  const [petType, setPetType] = useState(\"\");\n  // State for storing details about the pet\n  const [petDetails, setPetDetails] = useState({\n    breed: \"\",\n    size: \"\",\n    foodCost: 0,\n    groomingCost: 0,\n    vetCost: 0,\n    additionalCosts: 0,\n  });\n  // State for the list of breeds based on selected pet type\n  const [breeds, setBreeds] = useState([]);\n  // State for storing the calculation results\n  const [result, setResult] = useState(null);\n  // State for any error messages\n  const [error, setError] = useState(\"\");\n\n  // Predefined breed options with additional costs\n  const breedOptions = {\n    Dog: [\n      { name: \"Golden Retriever\", additionalCost: 200 },\n      { name: \"Labrador Retriever\", additionalCost: 180 },\n      { name: \"French Bulldog\", additionalCost: 220 },\n    ],\n    Cat: [\n      { name: \"Siamese\", additionalCost: 150 },\n      { name: \"Persian\", additionalCost: 170 },\n      { name: \"Maine Coon\", additionalCost: 190 },\n    ],\n  };\n\n  // Effect hook to update breeds list and reset breed in petDetails when petType changes\n  useEffect(() => {\n    if (petType && breedOptions[petType]) {\n      setBreeds(breedOptions[petType]);\n      setPetDetails((prevDetails) => ({ ...prevDetails, breed: \"\" }));\n    } else {\n      setBreeds([]);\n      setPetDetails((prevDetails) => ({ ...prevDetails, breed: \"\" }));\n    }\n  }, [petType]);\n\n  // Function to calculate total and monthly costs, and lifetime cost of pet ownership\n  const calculateCosts = () => {\n    if (!petType || !petDetails.breed || !petDetails.size) {\n      setError(\"Please provide all required details.\");\n      return;\n    }\n    setError(\"\");\n    // Base annual cost for any pet\n    let baseAnnualCost = 1000;\n    // Additional cost based on breed\n    const breedCost =\n      breeds.find((b) => b.name === petDetails.breed)?.additionalCost || 0;\n    // Total annual cost calculation\n    const totalAnnualCost =\n      baseAnnualCost +\n      breedCost +\n      parseFloat(petDetails.foodCost) +\n      parseFloat(petDetails.groomingCost) +\n      parseFloat(petDetails.vetCost) +\n      parseFloat(petDetails.additionalCosts);\n\n    // Monthly cost calculation\n    const monthlyCost = totalAnnualCost / 12;\n    // Calculate expected life span based on pet type and size\n    const expectedLifeSpan = calculateLifeExpectancy(petType, petDetails.size);\n    // Calculate lifetime cost\n    const lifetimeCost = totalAnnualCost * expectedLifeSpan;\n\n    // Generate chart data for pie chart visualizaiton\n    const chartData = {\n      labels: [\"Food\", \"Grooming\", \"Vet\", \"Additional Costs\", \"Base Cost\"],\n      datasets: [\n        {\n          label: \"Cost Breakdown\",\n          data: [\n            petDetails.foodCost,\n            petDetails.groomingCost,\n            petDetails.vetCost,\n            petDetails.additionalCosts,\n            baseAnnualCost,\n          ],\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(54, 162, 235, 0.2)\",\n            \"rgba(255, 206, 86, 0.2)\",\n            \"rgba(75, 192, 192, 0.2)\",\n            \"rgba(153, 102, 255, 0.2)\",\n          ],\n          borderColor: [\n            \"rgba(255, 99, 132, 1)\",\n            \"rgba(54, 162, 235, 1)\",\n            \"rgba(255, 206, 86, 1)\",\n            \"rgba(75, 192, 192, 1)\",\n            \"rgba(153, 102, 255, 1)\",\n          ],\n          borderWidth: 1,\n        },\n      ],\n    };\n    // Set the result state with calcualted costs and chart data for rendering\n    setResult({\n      annualCost: totalAnnualCost,\n      monthlyCost,\n      lifetimeCost,\n      chartData,\n    });\n  };\n\n  // Options for customizing the appearance and functionality of the chart\n  const chartOptions = {\n    plugins: {\n      title: {\n        display: true,\n        text: \"Cost Breakdown in Pie Chart\", // Chart title\n        font: {\n          size: 40,\n          family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n          weight: \"bold\",\n        },\n        color: \"#333\",\n        padding: {\n          top: 20,\n          bottom: 30,\n        },\n      },\n      legend: {\n        display: true, // Show legend\n        position: \"top\", // Legend position\n        labels: {\n          font: {\n            size: 13,\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n          },\n          color: \"#444\",\n        },\n      },\n      tooltip: {\n        enabled: true, // Enable tooltips\n        mode: \"index\",\n        intersect: false,\n        bodyFont: {\n          size: 16,\n        },\n        backgroundColor: \"rgba(0,0,0,0.8)\",\n        titleFont: {\n          size: 16,\n          weight: \"bold\",\n        },\n        // Custom tooltip format to show currency values\n        callbacks: {\n          label: function (context) {\n            let label = context.label;\n            let value = context.parsed;\n            return `${label}: $${value.toFixed(2)}`;\n          },\n        },\n      },\n    },\n    animation: {\n      animateRotate: true,\n      animateScale: true,\n      duration: 1000, // Animation duration\n    },\n    responsive: true, // Ensure chart is responsive\n    maintainAspectRatio: false, // Allow aspect ratio to change\n    layout: {\n      padding: {\n        left: 10,\n        right: 10,\n        top: 0,\n        bottom: 0,\n      },\n    },\n  };\n\n  // Function to calculate expected life span of the pet based on its type and size\n  const calculateLifeExpectancy = (petType, size) => {\n    if (petType === \"Dog\") {\n      return size === \"Large\" ? 10 : 15;\n    } else if (petType === \"Cat\") {\n      return 18;\n    } else {\n      return 5; // Default for 'Other'\n    }\n  };\n\n  // Function to download the results as a text file and the chart image\n  const downloadResults = () => {\n    if (!result) return; // Ensure there are results to download\n    const filename = \"pet_ownership_cost_estimate.txt\";\n    // Format content for the text file\n    const content = `Pet Ownership Cost Estimate:\nPet Type: ${petType}\nBreed: ${petDetails.breed}\nSize: ${petDetails.size}\nAnnual Cost: $${result.annualCost.toFixed(2)}\nMonthly Cost: $${result.monthlyCost.toFixed(2)}\nLifetime Cost: $${result.lifetimeCost.toFixed(2)}\n`;\n    // Create and trigger a download link for the text file\n    const element = document.createElement(\"a\");\n    const file = new Blob([content], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for Firefox\n    element.click();\n    // Check if the chart reference exists and the current instance is available\n    if (chartRef.current) {\n      const chartInstance = chartRef.current.chartInstance;\n      const url = chartInstance.toBase64Image(); // Get the chart image as a base64-encoded string\n\n      // Create a link and trigger the download\n      const imageLink = document.createElement(\"a\");\n      imageLink.href = url;\n      imageLink.download = \"chart.png\";\n      document.body.appendChild(imageLink); // Required for Firefox\n      imageLink.click();\n      document.body.removeChild(imageLink); // Clean up\n    }\n  };\n\n  // Render the calculator UI\n  return (\n    <div className={styles.calculator}>\n    {/* Title of the calculator */}\n      <h2 className={styles.h1}>Pet Ownership Cost Calculator</h2>\n      {/* Display error message if there is one */}\n      {error && <p className={styles.error}>{error}</p>}\n       {/* Dropdown to select pet type */}\n      <div>\n        <label className={styles.label}>Pet Type:</label>\n        <select value={petType} onChange={(e) => setPetType(e.target.value)}>\n          <option value=\"\">Select Pet Type</option>\n          <option value=\"Dog\">Dog</option>\n          <option value=\"Cat\">Cat</option>\n          <option value=\"Other\">Other</option>\n        </select>\n      </div>\n      {/* Dropdown to select breed based on the selected pet type */}\n      <div>\n        <label className={styles.label}>Breed:</label>\n        <select\n          value={petDetails.breed}\n          onChange={(e) =>\n            setPetDetails({ ...petDetails, breed: e.target.value })\n          }\n        >\n          <option value=\"\">Select Breed</option>\n          {breeds.map((breed) => (\n            <option key={breed.name} value={breed.name}>\n              {breed.name}\n            </option>\n          ))}\n        </select>\n      </div>\n         {/* Dropdown to select pet size */}\n      <div>\n        <label className={styles.label}>Size:</label>\n        <select\n          value={petDetails.size}\n          onChange={(e) =>\n            setPetDetails({ ...petDetails, size: e.target.value })\n          }\n        >\n          <option value=\"\">Select Size</option>\n          <option value=\"Small\">Small</option>\n          <option value=\"Medium\">Medium</option>\n          <option value=\"Large\">Large</option>\n        </select>\n      </div>\n         {/* Input field for monthly food cost */}\n      <div>\n        <label className={styles.label}>Monthly Food Cost ($):</label>\n        <input\n          type=\"number\"\n          value={petDetails.foodCost}\n          onChange={(e) =>\n            setPetDetails({ ...petDetails, foodCost: e.target.value })\n          }\n          placeholder=\"Food Cost\"\n        />\n      </div>\n      {/* Input field for annual grooming cost */}\n      <div>\n        <label className={styles.label}>Annual Grooming Cost ($):</label>\n        <input\n          type=\"number\"\n          value={petDetails.groomingCost}\n          onChange={(e) =>\n            setPetDetails({ ...petDetails, groomingCost: e.target.value })\n          }\n          placeholder=\"Grooming Cost\"\n        />\n      </div>\n       {/* Input field for annual vet cost */}\n      <div>\n        <label className={styles.label}>Annual Vet Cost ($):</label>\n        <input\n          type=\"number\"\n          value={petDetails.vetCost}\n          onChange={(e) =>\n            setPetDetails({ ...petDetails, vetCost: e.target.value })\n          }\n          placeholder=\"Vet Cost\"\n        />\n      </div>\n         {/* Input field for annual additional costs */}\n      <div>\n        <label className={styles.label}>Annual Additional Costs ($):</label>\n        <input\n          type=\"number\"\n          value={petDetails.additionalCosts}\n          onChange={(e) =>\n            setPetDetails({ ...petDetails, additionalCosts: e.target.value })\n          }\n          placeholder=\"Additional Costs\"\n        />\n        {/* Button to calculate costs based on inputs */}\n      </div>\n      <button onClick={calculateCosts} className={styles.calculateButton}>\n        Calculate\n      </button>\n      {/* Conditionally render the results section if results are present */}\n      {result && (\n        <div className={styles.results}>\n          <p>Annual Cost: ${result.annualCost.toFixed(2)}</p>\n          <p>Monthly Cost: ${result.monthlyCost.toFixed(2)}</p>\n          <p>Lifetime Cost: ${result.lifetimeCost.toFixed(2)}</p>\n          <button onClick={downloadResults} className={styles.downloadButton}>\n            Download Estimate\n          </button>\n          {/* Render the pie chart if result and chartData are available */}\n          {result && result.chartData && (\n            <div className={styles.chartContainer}>\n              <Doughnut\n                data={result.chartData}\n                options={chartOptions}\n                ref={chartRef}\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Calculator;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,SAASC,QAAQ,QAAQ,iBAAiB,CAAC,CAAC;AAC5C,OAAO,eAAe,CAAC,CAAC;;AAExB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB;EACA,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B;EACA,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C;EACA,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC;IAC3Cc,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE,CAAC;IACXC,YAAY,EAAE,CAAC;IACfC,OAAO,EAAE,CAAC;IACVC,eAAe,EAAE;EACnB,CAAC,CAAC;EACF;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACxC;EACA,MAAM,CAACsB,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC1C;EACA,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAM0B,YAAY,GAAG;IACnBC,GAAG,EAAE,CACH;MAAEC,IAAI,EAAE,kBAAkB;MAAEC,cAAc,EAAE;IAAI,CAAC,EACjD;MAAED,IAAI,EAAE,oBAAoB;MAAEC,cAAc,EAAE;IAAI,CAAC,EACnD;MAAED,IAAI,EAAE,gBAAgB;MAAEC,cAAc,EAAE;IAAI,CAAC,CAChD;IACDC,GAAG,EAAE,CACH;MAAEF,IAAI,EAAE,SAAS;MAAEC,cAAc,EAAE;IAAI,CAAC,EACxC;MAAED,IAAI,EAAE,SAAS;MAAEC,cAAc,EAAE;IAAI,CAAC,EACxC;MAAED,IAAI,EAAE,YAAY;MAAEC,cAAc,EAAE;IAAI,CAAC;EAE/C,CAAC;;EAED;EACA5B,SAAS,CAAC,MAAM;IACd,IAAIS,OAAO,IAAIgB,YAAY,CAAChB,OAAO,CAAC,EAAE;MACpCW,SAAS,CAACK,YAAY,CAAChB,OAAO,CAAC,CAAC;MAChCG,aAAa,CAAEkB,WAAW,KAAM;QAAE,GAAGA,WAAW;QAAEjB,KAAK,EAAE;MAAG,CAAC,CAAC,CAAC;IACjE,CAAC,MAAM;MACLO,SAAS,CAAC,EAAE,CAAC;MACbR,aAAa,CAAEkB,WAAW,KAAM;QAAE,GAAGA,WAAW;QAAEjB,KAAK,EAAE;MAAG,CAAC,CAAC,CAAC;IACjE;EACF,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMsB,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAC,YAAA;IAC3B,IAAI,CAACvB,OAAO,IAAI,CAACE,UAAU,CAACE,KAAK,IAAI,CAACF,UAAU,CAACG,IAAI,EAAE;MACrDU,QAAQ,CAAC,sCAAsC,CAAC;MAChD;IACF;IACAA,QAAQ,CAAC,EAAE,CAAC;IACZ;IACA,IAAIS,cAAc,GAAG,IAAI;IACzB;IACA,MAAMC,SAAS,GACb,EAAAF,YAAA,GAAAb,MAAM,CAACgB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACT,IAAI,KAAKhB,UAAU,CAACE,KAAK,CAAC,cAAAmB,YAAA,uBAA/CA,YAAA,CAAiDJ,cAAc,KAAI,CAAC;IACtE;IACA,MAAMS,eAAe,GACnBJ,cAAc,GACdC,SAAS,GACTI,UAAU,CAAC3B,UAAU,CAACI,QAAQ,CAAC,GAC/BuB,UAAU,CAAC3B,UAAU,CAACK,YAAY,CAAC,GACnCsB,UAAU,CAAC3B,UAAU,CAACM,OAAO,CAAC,GAC9BqB,UAAU,CAAC3B,UAAU,CAACO,eAAe,CAAC;;IAExC;IACA,MAAMqB,WAAW,GAAGF,eAAe,GAAG,EAAE;IACxC;IACA,MAAMG,gBAAgB,GAAGC,uBAAuB,CAAChC,OAAO,EAAEE,UAAU,CAACG,IAAI,CAAC;IAC1E;IACA,MAAM4B,YAAY,GAAGL,eAAe,GAAGG,gBAAgB;;IAEvD;IACA,MAAMG,SAAS,GAAG;MAChBC,MAAM,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,kBAAkB,EAAE,WAAW,CAAC;MACpEC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,gBAAgB;QACvBC,IAAI,EAAE,CACJpC,UAAU,CAACI,QAAQ,EACnBJ,UAAU,CAACK,YAAY,EACvBL,UAAU,CAACM,OAAO,EAClBN,UAAU,CAACO,eAAe,EAC1Be,cAAc,CACf;QACDe,eAAe,EAAE,CACf,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,0BAA0B,CAC3B;QACDC,WAAW,EAAE,CACX,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,wBAAwB,CACzB;QACDC,WAAW,EAAE;MACf,CAAC;IAEL,CAAC;IACD;IACA5B,SAAS,CAAC;MACR6B,UAAU,EAAEd,eAAe;MAC3BE,WAAW;MACXG,YAAY;MACZC;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMS,YAAY,GAAG;IACnBC,OAAO,EAAE;MACPC,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,6BAA6B;QAAE;QACrCC,IAAI,EAAE;UACJ3C,IAAI,EAAE,EAAE;UACR4C,MAAM,EAAE,oDAAoD;UAC5DC,MAAM,EAAE;QACV,CAAC;QACDC,KAAK,EAAE,MAAM;QACbC,OAAO,EAAE;UACPC,GAAG,EAAE,EAAE;UACPC,MAAM,EAAE;QACV;MACF,CAAC;MACDC,MAAM,EAAE;QACNT,OAAO,EAAE,IAAI;QAAE;QACfU,QAAQ,EAAE,KAAK;QAAE;QACjBrB,MAAM,EAAE;UACNa,IAAI,EAAE;YACJ3C,IAAI,EAAE,EAAE;YACR4C,MAAM,EAAE;UACV,CAAC;UACDE,KAAK,EAAE;QACT;MACF,CAAC;MACDM,OAAO,EAAE;QACPC,OAAO,EAAE,IAAI;QAAE;QACfC,IAAI,EAAE,OAAO;QACbC,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAE;UACRxD,IAAI,EAAE;QACR,CAAC;QACDkC,eAAe,EAAE,iBAAiB;QAClCuB,SAAS,EAAE;UACTzD,IAAI,EAAE,EAAE;UACR6C,MAAM,EAAE;QACV,CAAC;QACD;QACAa,SAAS,EAAE;UACT1B,KAAK,EAAE,SAAAA,CAAU2B,OAAO,EAAE;YACxB,IAAI3B,KAAK,GAAG2B,OAAO,CAAC3B,KAAK;YACzB,IAAI4B,KAAK,GAAGD,OAAO,CAACE,MAAM;YAC1B,OAAQ,GAAE7B,KAAM,MAAK4B,KAAK,CAACE,OAAO,CAAC,CAAC,CAAE,EAAC;UACzC;QACF;MACF;IACF,CAAC;IACDC,SAAS,EAAE;MACTC,aAAa,EAAE,IAAI;MACnBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI,CAAE;IAClB,CAAC;IACDC,UAAU,EAAE,IAAI;IAAE;IAClBC,mBAAmB,EAAE,KAAK;IAAE;IAC5BC,MAAM,EAAE;MACNtB,OAAO,EAAE;QACPuB,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTvB,GAAG,EAAE,CAAC;QACNC,MAAM,EAAE;MACV;IACF;EACF,CAAC;;EAED;EACA,MAAMtB,uBAAuB,GAAGA,CAAChC,OAAO,EAAEK,IAAI,KAAK;IACjD,IAAIL,OAAO,KAAK,KAAK,EAAE;MACrB,OAAOK,IAAI,KAAK,OAAO,GAAG,EAAE,GAAG,EAAE;IACnC,CAAC,MAAM,IAAIL,OAAO,KAAK,KAAK,EAAE;MAC5B,OAAO,EAAE;IACX,CAAC,MAAM;MACL,OAAO,CAAC,CAAC,CAAC;IACZ;EACF,CAAC;;EAED;EACA,MAAM6E,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACjE,MAAM,EAAE,OAAO,CAAC;IACrB,MAAMkE,QAAQ,GAAG,iCAAiC;IAClD;IACA,MAAMC,OAAO,GAAI;AACrB,YAAY/E,OAAQ;AACpB,SAASE,UAAU,CAACE,KAAM;AAC1B,QAAQF,UAAU,CAACG,IAAK;AACxB,gBAAgBO,MAAM,CAAC8B,UAAU,CAACyB,OAAO,CAAC,CAAC,CAAE;AAC7C,iBAAiBvD,MAAM,CAACkB,WAAW,CAACqC,OAAO,CAAC,CAAC,CAAE;AAC/C,kBAAkBvD,MAAM,CAACqB,YAAY,CAACkC,OAAO,CAAC,CAAC,CAAE;AACjD,CAAC;IACG;IACA,MAAMa,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IAC3C,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,OAAO,CAAC,EAAE;MAAEM,IAAI,EAAE;IAAa,CAAC,CAAC;IACxDL,OAAO,CAACM,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;IACxCH,OAAO,CAACS,QAAQ,GAAGX,QAAQ;IAC3BG,QAAQ,CAACS,IAAI,CAACC,WAAW,CAACX,OAAO,CAAC,CAAC,CAAC;IACpCA,OAAO,CAACY,KAAK,CAAC,CAAC;IACf;IACA,IAAI7F,QAAQ,CAAC8F,OAAO,EAAE;MACpB,MAAMC,aAAa,GAAG/F,QAAQ,CAAC8F,OAAO,CAACC,aAAa;MACpD,MAAMC,GAAG,GAAGD,aAAa,CAACE,aAAa,CAAC,CAAC,CAAC,CAAC;;MAE3C;MACA,MAAMC,SAAS,GAAGhB,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MAC7Ce,SAAS,CAACX,IAAI,GAAGS,GAAG;MACpBE,SAAS,CAACR,QAAQ,GAAG,WAAW;MAChCR,QAAQ,CAACS,IAAI,CAACC,WAAW,CAACM,SAAS,CAAC,CAAC,CAAC;MACtCA,SAAS,CAACL,KAAK,CAAC,CAAC;MACjBX,QAAQ,CAACS,IAAI,CAACQ,WAAW,CAACD,SAAS,CAAC,CAAC,CAAC;IACxC;EACF,CAAC;;EAED;EACA,oBACErG,OAAA;IAAKuG,SAAS,EAAE1G,MAAM,CAAC2G,UAAW;IAAAC,QAAA,gBAEhCzG,OAAA;MAAIuG,SAAS,EAAE1G,MAAM,CAAC6G,EAAG;MAAAD,QAAA,EAAC;IAA6B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAE3D5F,KAAK,iBAAIlB,OAAA;MAAGuG,SAAS,EAAE1G,MAAM,CAACqB,KAAM;MAAAuF,QAAA,EAAEvF;IAAK;MAAAyF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEjD9G,OAAA;MAAAyG,QAAA,gBACEzG,OAAA;QAAOuG,SAAS,EAAE1G,MAAM,CAAC4C,KAAM;QAAAgE,QAAA,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACjD9G,OAAA;QAAQqE,KAAK,EAAEjE,OAAQ;QAAC2G,QAAQ,EAAGC,CAAC,IAAK3G,UAAU,CAAC2G,CAAC,CAACC,MAAM,CAAC5C,KAAK,CAAE;QAAAoC,QAAA,gBAClEzG,OAAA;UAAQqE,KAAK,EAAC,EAAE;UAAAoC,QAAA,EAAC;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzC9G,OAAA;UAAQqE,KAAK,EAAC,KAAK;UAAAoC,QAAA,EAAC;QAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChC9G,OAAA;UAAQqE,KAAK,EAAC,KAAK;UAAAoC,QAAA,EAAC;QAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChC9G,OAAA;UAAQqE,KAAK,EAAC,OAAO;UAAAoC,QAAA,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAEN9G,OAAA;MAAAyG,QAAA,gBACEzG,OAAA;QAAOuG,SAAS,EAAE1G,MAAM,CAAC4C,KAAM;QAAAgE,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC9C9G,OAAA;QACEqE,KAAK,EAAE/D,UAAU,CAACE,KAAM;QACxBuG,QAAQ,EAAGC,CAAC,IACVzG,aAAa,CAAC;UAAE,GAAGD,UAAU;UAAEE,KAAK,EAAEwG,CAAC,CAACC,MAAM,CAAC5C;QAAM,CAAC,CACvD;QAAAoC,QAAA,gBAEDzG,OAAA;UAAQqE,KAAK,EAAC,EAAE;UAAAoC,QAAA,EAAC;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACrChG,MAAM,CAACoG,GAAG,CAAE1G,KAAK,iBAChBR,OAAA;UAAyBqE,KAAK,EAAE7D,KAAK,CAACc,IAAK;UAAAmF,QAAA,EACxCjG,KAAK,CAACc;QAAI,GADAd,KAAK,CAACc,IAAI;UAAAqF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEf,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAEN9G,OAAA;MAAAyG,QAAA,gBACEzG,OAAA;QAAOuG,SAAS,EAAE1G,MAAM,CAAC4C,KAAM;QAAAgE,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC7C9G,OAAA;QACEqE,KAAK,EAAE/D,UAAU,CAACG,IAAK;QACvBsG,QAAQ,EAAGC,CAAC,IACVzG,aAAa,CAAC;UAAE,GAAGD,UAAU;UAAEG,IAAI,EAAEuG,CAAC,CAACC,MAAM,CAAC5C;QAAM,CAAC,CACtD;QAAAoC,QAAA,gBAEDzG,OAAA;UAAQqE,KAAK,EAAC,EAAE;UAAAoC,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACrC9G,OAAA;UAAQqE,KAAK,EAAC,OAAO;UAAAoC,QAAA,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpC9G,OAAA;UAAQqE,KAAK,EAAC,QAAQ;UAAAoC,QAAA,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACtC9G,OAAA;UAAQqE,KAAK,EAAC,OAAO;UAAAoC,QAAA,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAEN9G,OAAA;MAAAyG,QAAA,gBACEzG,OAAA;QAAOuG,SAAS,EAAE1G,MAAM,CAAC4C,KAAM;QAAAgE,QAAA,EAAC;MAAsB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC9D9G,OAAA;QACEyF,IAAI,EAAC,QAAQ;QACbpB,KAAK,EAAE/D,UAAU,CAACI,QAAS;QAC3BqG,QAAQ,EAAGC,CAAC,IACVzG,aAAa,CAAC;UAAE,GAAGD,UAAU;UAAEI,QAAQ,EAAEsG,CAAC,CAACC,MAAM,CAAC5C;QAAM,CAAC,CAC1D;QACD8C,WAAW,EAAC;MAAW;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN9G,OAAA;MAAAyG,QAAA,gBACEzG,OAAA;QAAOuG,SAAS,EAAE1G,MAAM,CAAC4C,KAAM;QAAAgE,QAAA,EAAC;MAAyB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACjE9G,OAAA;QACEyF,IAAI,EAAC,QAAQ;QACbpB,KAAK,EAAE/D,UAAU,CAACK,YAAa;QAC/BoG,QAAQ,EAAGC,CAAC,IACVzG,aAAa,CAAC;UAAE,GAAGD,UAAU;UAAEK,YAAY,EAAEqG,CAAC,CAACC,MAAM,CAAC5C;QAAM,CAAC,CAC9D;QACD8C,WAAW,EAAC;MAAe;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN9G,OAAA;MAAAyG,QAAA,gBACEzG,OAAA;QAAOuG,SAAS,EAAE1G,MAAM,CAAC4C,KAAM;QAAAgE,QAAA,EAAC;MAAoB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5D9G,OAAA;QACEyF,IAAI,EAAC,QAAQ;QACbpB,KAAK,EAAE/D,UAAU,CAACM,OAAQ;QAC1BmG,QAAQ,EAAGC,CAAC,IACVzG,aAAa,CAAC;UAAE,GAAGD,UAAU;UAAEM,OAAO,EAAEoG,CAAC,CAACC,MAAM,CAAC5C;QAAM,CAAC,CACzD;QACD8C,WAAW,EAAC;MAAU;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN9G,OAAA;MAAAyG,QAAA,gBACEzG,OAAA;QAAOuG,SAAS,EAAE1G,MAAM,CAAC4C,KAAM;QAAAgE,QAAA,EAAC;MAA4B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACpE9G,OAAA;QACEyF,IAAI,EAAC,QAAQ;QACbpB,KAAK,EAAE/D,UAAU,CAACO,eAAgB;QAClCkG,QAAQ,EAAGC,CAAC,IACVzG,aAAa,CAAC;UAAE,GAAGD,UAAU;UAAEO,eAAe,EAAEmG,CAAC,CAACC,MAAM,CAAC5C;QAAM,CAAC,CACjE;QACD8C,WAAW,EAAC;MAAkB;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEC,CAAC,eACN9G,OAAA;MAAQoH,OAAO,EAAE1F,cAAe;MAAC6E,SAAS,EAAE1G,MAAM,CAACwH,eAAgB;MAAAZ,QAAA,EAAC;IAEpE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAER9F,MAAM,iBACLhB,OAAA;MAAKuG,SAAS,EAAE1G,MAAM,CAACyH,OAAQ;MAAAb,QAAA,gBAC7BzG,OAAA;QAAAyG,QAAA,GAAG,gBAAc,EAACzF,MAAM,CAAC8B,UAAU,CAACyB,OAAO,CAAC,CAAC,CAAC;MAAA;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnD9G,OAAA;QAAAyG,QAAA,GAAG,iBAAe,EAACzF,MAAM,CAACkB,WAAW,CAACqC,OAAO,CAAC,CAAC,CAAC;MAAA;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrD9G,OAAA;QAAAyG,QAAA,GAAG,kBAAgB,EAACzF,MAAM,CAACqB,YAAY,CAACkC,OAAO,CAAC,CAAC,CAAC;MAAA;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvD9G,OAAA;QAAQoH,OAAO,EAAEnC,eAAgB;QAACsB,SAAS,EAAE1G,MAAM,CAAC0H,cAAe;QAAAd,QAAA,EAAC;MAEpE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAER9F,MAAM,IAAIA,MAAM,CAACsB,SAAS,iBACzBtC,OAAA;QAAKuG,SAAS,EAAE1G,MAAM,CAAC2H,cAAe;QAAAf,QAAA,eACpCzG,OAAA,CAACF,QAAQ;UACP4C,IAAI,EAAE1B,MAAM,CAACsB,SAAU;UACvBmF,OAAO,EAAE1E,YAAa;UACtB2E,GAAG,EAAEvH;QAAS;UAAAwG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5G,EAAA,CA/VQD,UAAU;AAAA0H,EAAA,GAAV1H,UAAU;AAiWnB,eAAeA,UAAU;AAAC,IAAA0H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}